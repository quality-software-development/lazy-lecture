Файл: /c/Users/Fasci/PycharmProjects/lazy-lecture/api/source/app/users/__init__.py
Содержимое:

------------------------------------

Игнорируем папку: /c/Users/Fasci/PycharmProjects/lazy-lecture/api/source/app/users/__pycache__
Пропускаем файл (недопустимое расширение): /c/Users/Fasci/PycharmProjects/lazy-lecture/api/source/app/users/all_files.txt
Файл: /c/Users/Fasci/PycharmProjects/lazy-lecture/api/source/app/users/enums.py
Содержимое:
from enum import Enum


class Roles(str, Enum):
    ADMIN = "admin"
    USER = "user"


class Sort(str, Enum):
    ID = "id"
    USERNAME = "username"
    CREATE_DATE = "create_date"
    UPDATE_DATE = "update_date"


class Order(str, Enum):
    ASC = "asc"
    DESC = "desc"

------------------------------------

Файл: /c/Users/Fasci/PycharmProjects/lazy-lecture/api/source/app/users/models.py
Содержимое:
from sqlalchemy import Boolean, Column, Float, String

from source.core.models import Model


class User(Model):
    __tablename__ = "User"

    username = Column(name="username", type_=String, unique=True, index=True)
    password = Column(name="password", type_=String)
    active = Column(name="active", type_=Boolean)
    role = Column(name="role", type_=String)
    password_timestamp = Column(name="password_timestamp", type_=Float)
    can_interact = Column(name="can_interact", type_=Boolean, default=False)

------------------------------------

Файл: /c/Users/Fasci/PycharmProjects/lazy-lecture/api/source/app/users/schemas.py
Содержимое:
from datetime import datetime, timezone

from pydantic import BaseModel, Field, model_validator

from source.app.auth.utils import get_password_hash
from source.app.users.enums import Order, Roles, Sort
from source.core.schemas import PageSchema, PaginationSchema, ResponseSchema
from source.app.auth.schemas import Credentials, UsernameStr, PasswordStr


# class UserRequest(BaseModel):
#     username: str
#     password: str
UserRequest = Credentials


class UserCreate(UserRequest):
    active: bool = True
    role: Roles = Roles.USER
    password_timestamp: float = Field(default_factory=lambda: datetime.now(timezone.utc).timestamp())

    @model_validator(mode="after")
    def validator(cls, values: "UserCreate") -> "UserCreate":
        values.password = get_password_hash(values.password)
        return values


class UserResponse(ResponseSchema):
    username: UsernameStr
    active: bool
    can_interact: bool
    role: Roles
    create_date: datetime
    update_date: datetime


class UserUpdateRequest(BaseModel):
    # username: str | None = None is not alterable
    password: PasswordStr | None = None
    can_interact: bool | None = None


class UserUpdateRequestAdmin(UserUpdateRequest):
    active: bool | None = None
    role: Roles | None = None


class UserUpdate(UserUpdateRequestAdmin):
    password_timestamp: float | None = None

    @model_validator(mode="after")
    def validator(cls, values: "UserUpdate") -> "UserUpdate":
        if password := values.password:
            values.password = get_password_hash(password)
            values.password_timestamp = datetime.now(timezone.utc).timestamp()
        return values


class UserPage(PageSchema):
    users: list[UserResponse]


class UserPagination(PaginationSchema):
    sort: Sort = Sort.ID
    order: Order = Order.ASC


class UserId(BaseModel):
    user_id: int


class Username(BaseModel):
    username: UsernameStr

------------------------------------

Файл: /c/Users/Fasci/PycharmProjects/lazy-lecture/api/source/app/users/services.py
Содержимое:
from math import ceil

from sqlalchemy import asc, desc, func, select
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from source.app.users.enums import Order, Sort
from source.app.users.models import User
from source.app.users.schemas import (
    UserCreate,
    UserPage,
    UserRequest,
    UserUpdate,
    UserUpdateRequest,
)


async def create_user(user: UserRequest, db: AsyncSession) -> User | None:
    try:
        user = User(**UserCreate(**user.model_dump()).model_dump())
        db.add(user)
        await db.commit()
        await db.refresh(user)
        return user
    except IntegrityError as e:
        print(e)
        return None


async def get_user_by_id(
    user_id: int,
    db: AsyncSession,
) -> User:
    return await db.get_one(User, user_id)


async def update_user(
    user: User,
    request: UserUpdateRequest,
    db: AsyncSession,
) -> User | None:
    try:
        fields_to_update = UserUpdate(**request.model_dump()).model_dump().items()
        for key, value in fields_to_update:
            if value is not None:
                setattr(user, key, value)
        await db.commit()
        await db.refresh(user)
        return user
    except IntegrityError:
        return None


async def delete_user(user: User, db: AsyncSession) -> None:
    await db.delete(user)
    await db.commit()
    return None


async def list_users(page: int, size: int, sort: Sort, order: Order, db: AsyncSession) -> UserPage:
    order = asc(sort) if order == Order.ASC else desc(sort)

    users = await db.scalars(select(User).order_by(order).offset((page - 1) * size).limit(size))
    total = await db.scalar(select(func.count(User.id)))

    return UserPage(
        users=users,
        page=page,
        size=size,
        total=total,
        pages=(ceil(total / size)),
    )

------------------------------------

Файл: /c/Users/Fasci/PycharmProjects/lazy-lecture/api/source/app/users/utils.py
Содержимое:
from sqlalchemy import exists, select
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from source.app.users.enums import Roles
from source.app.users.models import User
from source.app.users.schemas import UserCreate
from source.core.database import SessionLocal
from source.core.settings import settings


async def create_admin(db: AsyncSession = SessionLocal()):
    admin_user = User(
        **UserCreate(
            username=settings.ADMIN_USERNAME,
            password=settings.ADMIN_PASSWORD,
            role=Roles.ADMIN,
        ).model_dump()
    )
    try:
        if not await db.scalar(select(exists().where(User.role == Roles.ADMIN))):
            db.add(admin_user)
            await db.commit()
            await db.refresh(admin_user)
    except IntegrityError:
        pass
    finally:
        await db.close()

------------------------------------

Файл: /c/Users/Fasci/PycharmProjects/lazy-lecture/api/source/app/users/views.py
Содержимое:
from fastapi import APIRouter, Depends, status
from sqlalchemy.ext.asyncio import AsyncSession

from source.app.auth.auth import CurrentUser
from source.app.users.models import User
from source.app.users.schemas import (
    UserRequest,
    UserResponse,
    UserUpdateRequest,
)
from source.app.users.services import create_user, get_user_by_id, update_user
from source.core.database import get_db
from source.core.exceptions import conflict
from source.core.schemas import ExceptionSchema
from source.app.transcriptions.types import validate_admin_token

users_router = APIRouter(prefix="/auth", tags=["auth"])


@users_router.post(
    "/register",
    response_model=UserResponse,
    responses={status.HTTP_409_CONFLICT: {"model": ExceptionSchema}},
    status_code=status.HTTP_201_CREATED,
)
async def user_create(user: UserRequest, db: AsyncSession = Depends(get_db)) -> User:
    if created_user := await create_user(user=user, db=db):
        return created_user
    return conflict(f"User '{user.username}' already exists")


@users_router.get(
    "/info",
    response_model=UserResponse,
    responses={status.HTTP_401_UNAUTHORIZED: {"model": ExceptionSchema}},
)
async def user_get(user: CurrentUser) -> User:
    return user


@users_router.patch(
    "/patch",
    response_model=UserResponse,
    responses={
        status.HTTP_401_UNAUTHORIZED: {"model": ExceptionSchema},
        status.HTTP_409_CONFLICT: {"model": ExceptionSchema},
    },
)
async def user_update(
    user_id: int,
    request: UserUpdateRequest,
    admin_secret_token: str = Depends(validate_admin_token),
    db: AsyncSession = Depends(get_db),
) -> User:
    print(admin_secret_token)
    user = await get_user_by_id(user_id, db)
    if updated_user := await update_user(user=user, request=request, db=db):
        return updated_user
    return conflict(f"User '{request.username}' already exists")

------------------------------------
