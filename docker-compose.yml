services:
  bot:
    build: bot
    environment:
      - BOT_TOKEN=${BOT_TOKEN}

  worker:
    build: worker
    volumes:
      - worker_cache:/cache:rw
      - object_storage:/object_storage:ro
    environment:
      - DEVICE=${DEVICE:-cpu}
      - WHISPER_MODEL_NAME=${WHISPER_MODEL_NAME:-tiny}
      - DOWNLOAD_ROOT=${DOWNLOAD_ROOT:-/cache}
      - PIKA_HOST=rabbitmq
      - PIKA_PORT=5672
      - PIKA_USER=${RMQ_USER:-user}
      - PIKA_PASS=${RMQ_PASS:-pass}
      - PIKA_QUEUE=task_queue
      - OBJECT_STORAGE_PATH=/object_storage
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:4.0.3-management
    ports:
      - 5672:5672
      - 15672:15672
      - 15692:15692
    environment:
      - RMQ_USER=${RMQ_USER:-user}
      - RMQ_PASS=${RMQ_PASS:-pass}
    volumes:
      - rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2Gb
        reservations:
          cpus: '0.5'
          memory: 1Gb

  api:
    container_name: api
    build:
      context: ./api
      dockerfile: ./config/dockerfile
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - ./api/config/.env
    volumes:
      - ./api/source:/app/source
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - ./api/config/.env
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 3s
      timeout: 3s
      retries: 3

volumes:
  object_storage:
  worker_cache:
  rabbitmq:
