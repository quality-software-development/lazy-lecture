name: Lazy Lecture CI

on:
  push:
    branches:
      - main
      - feature/ci_cd_integration
  pull_request:
    branches:
      - main

jobs:
  # Первоначальный job для установки общих зависимостей
  build:
    name: Build & Install Dependencies
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Установка Python 3.9 (если необходимо для дальнейших шагов)
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      # Установка Node.js 20 для web-ui
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Кэширование pip зависимостей (worker, api, bot)
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      # Установка зависимостей для worker, bot и api
      - name: Install Python Dependencies
        run: |
          pip install -r worker/requirements.txt
          pip install -r bot/requirements.txt
          pip install -r api/config/requirements.txt

      # Кэширование npm зависимостей для web-ui
      - name: Cache npm dependencies for web-ui
        uses: actions/cache@v3
        with:
          path: web-ui/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('web-ui/package-lock.json') }}

      - name: Install npm Dependencies for web-ui
        run: |
          cd web-ui
          npm install

  # Матричный запуск тестов для всех компонентов: worker, api, bot, web-ui
  tests:
    name: Run Tests for ${{ matrix.component }}
    needs: build
    runs-on: self-hosted
    strategy:
      matrix:
        component: [worker, api, bot, web-ui]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Устанавливаем PYTHONPATH, чтобы модули находились корректно
      - name: Set PYTHONPATH environment variable
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      # Для каждого компонента своя установка зависимостей и запуск тестов
      - name: Run Tests for ${{ matrix.component }}
        run: |
          if [ "${{ matrix.component }}" == "worker" ]; then
            pytest worker/tests --rootdir=worker --cov=worker --cov-report=xml:coverage-worker.xml
          elif [ "${{ matrix.component }}" == "api" ]; then
            cd api
            pytest --rootdir=$PWD --cov=source --cov-report=xml:api_coverage.xml
          elif [ "${{ matrix.component }}" == "bot" ]; then
            cd bot
            pytest --rootdir=$PWD --cov=bot --cov-report=xml:bot_coverage.xml
          elif [ "${{ matrix.component }}" == "web-ui" ]; then
            cd web-ui
            npm run test:unit:ci
            npm run test:unit:coverage
          fi

      # Сохраняем артефакт покрытия для каждого компонента
      - name: Upload Coverage Report for worker
        if: matrix.component == 'worker'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-worker
          path: coverage-worker.xml

      - name: Upload Coverage Report for api
        if: matrix.component == 'api'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-api
          path: api_coverage.xml

      - name: Upload Coverage Report for bot
        if: matrix.component == 'bot'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-bot
          path: bot_coverage.xml

      - name: Upload Coverage Report for web-ui
        if: matrix.component == 'web-ui'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-web-ui
          path: web-ui/coverage/lcov.info

  # Финальный job для анализа и загрузки покрытия в SonarQube
  analyze:
    name: Analyze Coverage & Run SonarQube Scan
    needs: tests
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Coverage Reports
        uses: actions/download-artifact@v4
        with:
          path: coverage_reports

      - name: List downloaded coverage reports
        run: ls -R coverage_reports

      - name: Upload Coverage to SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          pip install sonar-scanner
          sonar-scanner \
            -Dsonar.projectKey=lazy-lecture \
            -Dsonar.sources=worker,web-ui/src,bot,api/source \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.python.coverage.reportPaths=coverage_reports/coverage-worker.xml,coverage_reports/api_coverage.xml,coverage_reports/bot_coverage.xml \
            -Dsonar.javascript.lcov.reportPaths=coverage_reports/lcov.info
