name: Lazy Lecture CI

on:
  push:
    branches:
      - main
      - feature/ci_cd_integration
  pull_request:
    branches:
      - main

#############################
# Задача сборки и установки #
#############################
jobs:
  build:
    name: Сборка и установка зависимостей
    runs-on: self-hosted
    outputs:
      build_status: success
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      # Установка Python 3.9
      - name: Настройка Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      # Установка Node.js версии 20 для web-ui
      - name: Настройка Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Кэширование pip зависимостей для Python (используется для worker, bot, api)
      - name: Кэширование pip зависимостей
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      # Установка Python зависимостей
      - name: Установка Python зависимостей
        run: |
          pip install -r worker/requirements.txt
          pip install -r bot/requirements.txt
          pip install -r api/config/requirements.txt

      # Кэширование npm зависимостей для web-ui
      - name: Кэширование npm зависимостей для web-ui
        uses: actions/cache@v3
        with:
          path: web-ui/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('web-ui/package-lock.json') }}

      # Установка npm зависимостей для web-ui
      - name: Установка npm зависимостей для web-ui
        run: |
          cd web-ui
          npm install

#########################################
# Задачи запуска тестов для каждого модуля #
#########################################

  tests_worker:
    name: Тесты worker
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      # Устанавливаем PYTHONPATH для корректного поиска модулей
      - name: Установка переменной окружения PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Запуск тестов worker
        run: |
          # Запускаем тесты для worker (unit, ml, integration)
          pytest worker/tests --rootdir=worker --cov=worker --cov-report=xml:coverage-worker.xml

      # Сохранение отчёта покрытия для worker
      - name: Сохранить отчёт покрытия worker
        uses: actions/upload-artifact@v4
        with:
          name: coverage-worker
          path: coverage-worker.xml

  tests_api:
    name: Тесты API
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      - name: Установка переменной окружения PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Запуск тестов API
        run: |
          cd api
          pytest --rootdir=$PWD --cov=source --cov-report=xml:api_coverage.xml

      # Сохранение отчёта покрытия для API
      - name: Сохранить отчёт покрытия API
        uses: actions/upload-artifact@v4
        with:
          name: coverage-api
          path: api_coverage.xml

  tests_bot:
    name: Тесты Bot
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      - name: Установка переменной окружения PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Запуск тестов Bot
        run: |
          cd bot
          pytest --rootdir=$PWD --cov=bot --cov-report=xml:bot_coverage.xml

      # Сохранение отчёта покрытия для Bot
      - name: Сохранить отчёт покрытия Bot
        uses: actions/upload-artifact@v4
        with:
          name: coverage-bot
          path: bot_coverage.xml

  tests_web_ui:
    name: Тесты web-ui
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      - name: Запуск тестов web-ui
        run: |
          cd web-ui
          # Запуск unit-тестов и генерация отчёта покрытия для web-ui
          npm run test:unit:ci
          npm run test:unit:coverage

      # Сохранение отчёта покрытия для web-ui
      - name: Сохранить отчёт покрытия web-ui
        uses: actions/upload-artifact@v4
        with:
          name: coverage-web-ui
          path: web-ui/coverage/lcov.info

#############################################
# Задача анализа покрытия и SonarQube скан #
#############################################
  analyze:
    name: Анализ покрытия и SonarQube
    runs-on: self-hosted
    needs: [tests_worker, tests_api, tests_bot, tests_web_ui]
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      # Скачиваем все отчёты покрытия, загруженные предыдущими задачами
      - name: Скачать все отчёты покрытия
        uses: actions/download-artifact@v4
        with:
          path: coverage_reports

      - name: Показать скачанные отчёты покрытия
        run: ls -R coverage_reports

      - name: Загрузить отчёт покрытия в SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          pip install sonar-scanner
          sonar-scanner \
            -Dsonar.projectKey=lazy-lecture \
            -Dsonar.sources=worker,web-ui/src,bot,api/source \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.python.coverage.reportPaths=coverage_reports/coverage-worker.xml,coverage_reports/api_coverage.xml,coverage_reports/bot_coverage.xml \
            -Dsonar.javascript.lcov.reportPaths=coverage_reports/lcov.info
