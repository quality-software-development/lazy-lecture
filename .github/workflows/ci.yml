name: Lazy Lecture CI

on:
  push:
    branches:
      - main
      - feature/ci_cd_integration
  pull_request:
    branches:
      - main

#############################
# Job: Сборка и установка зависимостей (без кэширования)
#############################
jobs:
  build:
    name: Сборка и установка зависимостей
    runs-on: self-hosted
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      # Установка Python 3.9
      - name: Настройка Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      # Установка Node.js версии 20 для web-ui
      - name: Настройка Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Установка зависимостей для всех Python-компонентов
      - name: Установка Python зависимостей
        run: |
          pip install -r worker/requirements.txt
          pip install -r bot/requirements.txt
          # Для API: если starlette==0.45.3 не доступна, то установим нужную версию заранее.
          pip install starlette==0.18.0
          pip install -r api/config/requirements.txt

      # Установка npm зависимостей для web-ui
      - name: Установка npm зависимостей для web-ui
        run: |
          cd web-ui
          npm install

#############################
# Тесты worker
#############################
  tests_worker:
      name: Тесты worker
      runs-on: self-hosted
      needs: build
      steps:
        - name: Checkout кода
          uses: actions/checkout@v4

        # Создаём каталог для загрузок и переопределяем DOWNLOAD_ROOT,
        # чтобы модель не пыталась записываться в /cache (нет прав)
        - name: Создать каталог для модели
          run: mkdir -p $GITHUB_WORKSPACE/cache

        - name: Установка переменной окружения DOWNLOAD_ROOT для worker
          run: echo "DOWNLOAD_ROOT=$GITHUB_WORKSPACE/cache" >> $GITHUB_ENV

        # Устанавливаем зависимости worker (на всякий случай, если они не установлены)
        - name: Установка зависимостей worker
          run: pip install -r worker/requirements.txt

        # Добавляем папку worker в PYTHONPATH для корректного импорта (например, worker.settings)
        - name: Установка PYTHONPATH для worker
          run: echo "PYTHONPATH=$GITHUB_WORKSPACE/worker:$GITHUB_WORKSPACE" >> $GITHUB_ENV

        # Копируем аудиофайл для тестов в корневую директорию, чтобы он был найден по относительному пути
        - name: Подготовка аудиофайла для тестов
          run: cp worker/sample_ru_120s.mp3 .

        - name: Запуск тестов worker (пропускаем интеграционные тесты)
          run: pytest --rootdir=. -m "not integration" worker/tests --cov=worker --cov-report=xml:coverage-worker.xml

        - name: Сохранить отчёт покрытия worker
          uses: actions/upload-artifact@v4
          with:
            name: coverage-worker
            path: coverage-worker.xml

#############################
# Тесты API
#############################
  tests_api:
    name: Тесты API
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      # Устанавливаем зависимости API (уже установлена версия starlette корректная)
      - name: Установка зависимостей API
        run: pip install -r api/config/requirements.txt

      # Добавляем каталог api в PYTHONPATH
      - name: Установка PYTHONPATH для API
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE/api:$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Запуск тестов API
        run: |
          # Запускаем тесты API из корневой директории
          pytest --rootdir=. --cov=source --cov-report=xml:api_coverage.xml api

      - name: Сохранить отчёт покрытия API
        uses: actions/upload-artifact@v4
        with:
          name: coverage-api
          path: api_coverage.xml

#############################
# Тесты Bot
#############################
  tests_bot:
    name: Тесты Bot
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      # Устанавливаем зависимости Bot (включая aiogram и прочее)
      - name: Установка зависимостей Bot
        run: pip install -r bot/requirements.txt

      # Добавляем папку bot в PYTHONPATH, чтобы корректно работали импорты из handlers
      - name: Установка PYTHONPATH для bot
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE/bot:$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Запуск тестов Bot
        run: pytest bot/tests --cov=bot --cov-report=xml:bot_coverage.xml

      - name: Сохранить отчёт покрытия Bot
        uses: actions/upload-artifact@v4
        with:
          name: coverage-bot
          path: bot_coverage.xml

#############################
# Тесты web-ui
#############################
  tests_web_ui:
    name: Тесты web-ui
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      # Настраиваем Node.js, чтобы npm/npx были доступны
      - name: Настройка Node.js 20 для web-ui
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Устанавливаем зависимости внутри каталога web-ui (npm ci гарантирует установку dev-зависимостей)
      - name: Установка зависимостей web-ui
        run: |
          cd web-ui
          npm ci

      - name: Запуск тестов web-ui
        run: |
          cd web-ui
          npx vitest run
          npx vitest run --coverage

      - name: Сохранить отчёт покрытия web-ui
        uses: actions/upload-artifact@v4
        with:
          name: coverage-web-ui
          path: web-ui/coverage/lcov.info

#############################################
# Job: Анализ покрытия и запуск SonarQube скана
#############################################
  analyze:
    name: Анализ покрытия и SonarQube
    runs-on: self-hosted
    needs: [tests_worker, tests_api, tests_bot, tests_web_ui]
    steps:
      - name: Checkout кода
        uses: actions/checkout@v4

      # Скачиваем все отчёты покрытия, загруженные предыдущими задачами
      - name: Скачать все отчёты покрытия
        uses: actions/download-artifact@v4
        with:
          path: coverage_reports

      - name: Показать скачанные отчёты покрытия
        run: ls -R coverage_reports

      - name: Загрузить отчёт покрытия в SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          pip install sonar-scanner
          sonar-scanner \
            -Dsonar.projectKey=lazy-lecture \
            -Dsonar.sources=worker,web-ui/src,bot,api/source \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.python.coverage.reportPaths=coverage_reports/coverage-worker.xml,coverage_reports/api_coverage.xml,coverage_reports/bot_coverage.xml \
            -Dsonar.javascript.lcov.reportPaths=coverage_reports/lcov.info
