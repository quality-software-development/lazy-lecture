name: CI Pipeline

on:
  push:
    branches:
      - main
      - feature/ci_cd_integration
  pull_request:
    branches:
      - main

jobs:
  # 1. Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'

      - name: Install Python dependencies for bot
        run: |
          cd bot
          pip install -r requirements.txt

      - name: Install Python dependencies for worker
        run: |
          cd worker
          pip install -r requirements_fast.txt

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install NPM dependencies for web-ui
        run: |
          cd web-ui
          npm install
          npm install eslint

  # 2. Lint job
  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install NPM dependencies for linting
        run: |
          cd web-ui
          npm install eslint

      - name: Run ESLint for web-ui
        run: |
          cd web-ui
          npx eslint --ext .js,.ts,.vue ./

      - name: Run Python Linter for bot
        run: |
          cd bot
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run Python Linter for worker
        run: |
          cd worker
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # 3. Tests job
  tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Unit and Integration Tests with docker compose
        run: |
          docker compose run --build -T worker python -m pytest

  # 4. ML Tests job
  ml-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run ML Tests for worker
        run: |
          docker compose run --build -T worker python -m pytest -m ml
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 1. Checkout репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Логин в Docker реестр
      - name: Log in to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Сборка и пуш Docker-образа
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:latest
            ${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}

      # 4. Установка kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # 5. Настройка Kubeconfig
      - name: Set up Kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig

      # 6. Применение манифестов Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/<DEPLOYMENT_NAME> <CONTAINER_NAME>=${{ secrets.REGISTRY_URL }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}
          kubectl rollout status deployment/<DEPLOYMENT_NAME>
